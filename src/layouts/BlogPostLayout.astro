---
import { render } from 'astro:content'

import FormattedDate from '../components/FormattedDate.astro'

import { VCenterRow } from '@/components/layout/v-center-row'
import { TableOfContents } from '@/components/toc'
import { Calendar, Clock, Minus, Plus } from 'lucide-react'

import { Breadcrumb } from '@/components/breadcrumb'
import { BaseCol } from '@/components/layout/base-col'
import ContentDiv from '@/components/layout/ContentDiv.astro'
import SidebarDiv from '@/components/layout/SidebarDiv.astro'
import { ThemeIndexLink } from '@/components/link/theme-index-link'
import { HeroImageCaption } from '@/components/posts/hero-image-caption'
import { StarRating } from '@/components/posts/star-rating'
import SideTags from '@/components/SideTags.astro'
import { TARGET_BLANK } from '@/consts'
import type { PostWithHero } from '@/lib/astro/post'
import type { ICrumb } from '@/lib/crumbs'
import { getUrlFriendlyTag } from '@/lib/http/urls'
import { sectionToParts, type IPost } from '@/lib/post'
import { growingSubsets } from '@/lib/utils'
import BaseLayout from './BaseLayout.astro'

// type Props = CollectionEntry<'blog'>['data'] & {
//   slug: string
//   minutesRead: string
//   //lastModified: Date
//   headings: {
//     depth: number
//     slug: string
//     text: string
//   }[]
// }

interface Props {
  post: PostWithHero
}

// const {
//   title,
//   description,
//   added,
//   updated,
//   hero,
//   slug,
//   minutesRead,
//   tags,
// } = Astro.props

const { post } = Astro.props

const slug = post.id.split('/').pop() || post.id // Flatten the slug

const { Content, remarkPluginFrontmatter } = await render(post)

const ogImage = `/img/og/${slug}.webp` //png

// const hero = post.data.hero
//   ? post.data.hero
//   : `/img/blog/${slug}.webp`

const crumbs: ICrumb[] = [
  {
    label: 'Blog',
    path: '/blog',
  },
]

// use the first to make a breadcrumb for nested
// sections that are otherwise not given in the slug
const section: string =
  post.data.sections && post.data.sections?.length > 0
    ? post.data.sections[0]!
    : ''

if (section) {
  const parts = growingSubsets(sectionToParts(section))

  for (const part of parts) {
    const name = part[part.length - 1]! // last part is the full section name
    crumbs.push({
      label: name,
      path: `/blog/${getUrlFriendlyTag(part.join('/'))}`,
    })
  }
}

const dataUpdated = post.data.updated ? post.data.updated : post.data.added
---

<BaseLayout
  title={post.data.title}
  description={post.data.description}
  tab="Blog"
  mode="light"
>
  <Fragment slot="head">
    <meta property="og:image" content={ogImage} />
  </Fragment>

  <article slot="main" class="mt-8 flex flex-col gap-y-16">
    <header>
      <ContentDiv slot="main" mainCls="gap-y-12">
        <Fragment slot="main">
          <Breadcrumb crumbs={crumbs} mode="light" />

          <VCenterRow
            data-mode="light"
            className="text-foreground/50 justify-between gap-2 text-sm data-[mode=dark]:text-white"
          >
            <VCenterRow className="gap-x-6">
              <VCenterRow className="gap-x-1">
                <Calendar
                  data-mode="light"
                  className="stroke-foreground/40 w-5 data-[mode=dark]:stroke-white"
                  strokeWidth={1.5}
                />
                <FormattedDate date={post.data.added} />
              </VCenterRow>
              <!-- <span
                class="bg-foreground/25 aspect-square h-1.5 w-1.5 rounded-full"
              ></span> -->
              <VCenterRow className="gap-x-1">
                <Clock
                  data-mode="light"
                  className="stroke-foreground/40 w-5 data-[mode=dark]:stroke-white"
                  strokeWidth={1.5}
                />
                <span>{remarkPluginFrontmatter.minutesRead}</span></VCenterRow
              >
            </VCenterRow>

            {
              post.data.links && (
                <VCenterRow className="gap-x-2">
                  {post.data.links.map(link => (
                    <ThemeIndexLink
                      href={link.url}
                      target={TARGET_BLANK}
                      startingColor="text-theme"
                    >
                      {link.title}
                    </ThemeIndexLink>
                  ))}
                </VCenterRow>
              )
            }
          </VCenterRow>

          <BaseCol className="gap-y-2">
            <h1
              class="text-4xl font-bold data-[mode=dark]:text-white"
              data-mode="light"
            >
              {post.data.title}
            </h1>

            {
              post.data.description && (
                <p
                  class="text-foreground/70 data-[mode=dark]:text-white/50"
                  data-mode="light"
                >
                  {post.data.description}
                </p>
              )
            }
          </BaseCol>

          {
            post.data.resolvedHero && (
              <div class="group relative aspect-2/1 w-full overflow-hidden rounded-2xl">
                <img
                  src={post.data.resolvedHero}
                  alt={post.data.heroAlt || post.data.title}
                  class="w-full scale-102 object-cover object-center transition-transform duration-500 ease-in-out group-hover:scale-105"
                  loading="lazy"
                />

                {post.data.heroAlt && (
                  <HeroImageCaption
                    post={post as IPost}
                    className="duration-500 opacity-0 transition-opacity group-hover:opacity-100"
                  />
                )}
              </div>
            )
          }
        </Fragment>
      </ContentDiv>
    </header>

    <ContentDiv slot="main" mainCls="gap-y-8">
      <SidebarDiv mainCls="gap-y-8" slot="main">
        <Fragment slot="main">
          {
            post.data.rating && (
              <VCenterRow className="gap-x-4">
                {post.data.rating && <StarRating rating={post.data.rating} />}
              </VCenterRow>
            )
          }

          {
            post.data.pros && (
              <section
                id="pros-and-cons"
                class="grid grid-cols-1 gap-6 text-sm lg:grid-cols-2"
              >
                <BaseCol className="gap-2 bg-emerald-50 p-6 rounded-2xl">
                  <h3 class="text-lg font-semibold">Pros</h3>
                  <ul class="flex flex-col gap-2">
                    {post.data.pros.map(p => (
                      <li class="flex flex-row items-center gap-x-2">
                        <VCenterRow className="justify-center shrink-0 bg-emerald-400 rounded-full w-4.5 h-4.5 aspect-square">
                          <Plus stroke="white" className="w-5 h-5" />
                        </VCenterRow>
                        <span>{p}</span>
                      </li>
                    ))}
                  </ul>
                </BaseCol>
                {post.data.cons && (
                  <BaseCol className="gap-2 bg-red-50 p-6 rounded-2xl">
                    <h3 class="text-lg font-semibold">Cons</h3>
                    <ul class="flex flex-col gap-2">
                      {post.data.cons.map(p => (
                        <li class="flex flex-row items-center gap-x-2">
                          <VCenterRow className="justify-center shrink-0 bg-red-400 rounded-full w-4.5 h-4.5 aspect-square">
                            <Minus stroke="white" className="w-5 h-5" />
                          </VCenterRow>
                          <span>{p}</span>
                        </li>
                      ))}
                    </ul>
                  </BaseCol>
                )}
              </section>
            )
          }

          <section class="markdown post">
            <Content />
          </section>
        </Fragment>
        <BaseCol className="sticky top-20 gap-12" slot="side">
          <SideTags tags={post.data.tags} />
          <TableOfContents client:only="react" />
          <!--  <LatestPosts /> -->
        </BaseCol>
      </SidebarDiv>
    </ContentDiv>
  </article>
</BaseLayout>

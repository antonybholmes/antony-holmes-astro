---
import { render, type CollectionEntry } from 'astro:content'

import Footer from '../components/Footer.astro'
import BaseLayout from './BaseLayout.astro'
import FormattedDate from '../components/FormattedDate.astro'
import { Image } from 'astro:assets'
import LatestPosts from '@components/LatestPosts.astro'

import Tags from '@/components/Tags.astro'
import { Calendar, Dot } from 'lucide-react'
import { VCenterRow } from '@/components/layout/v-center-row'
import { TableOfContents } from '@/components/toc'

import ContentLayout from './ContentLayout.astro'
import SidebarDiv from '@/components/layout/SidebarDiv.astro'
import { BaseCol } from '@/components/layout/base-col'

// type Props = CollectionEntry<'blog'>['data'] & {
//   slug: string
//   minutesRead: string
//   //lastModified: Date
//   headings: {
//     depth: number
//     slug: string
//     text: string
//   }[]
// }

interface Props {
  post: CollectionEntry<'blog'>
}

// const {
//   title,
//   description,
//   added,
//   updated,
//   heroImage,
//   slug,
//   minutesRead,
//   tags,
// } = Astro.props

const { post } = Astro.props

const slug = post.id.split('/').pop() || post.id // Flatten the slug

const { Content, remarkPluginFrontmatter, headings } = await render(post)

const ogImage = `/img/og/${slug}.png`

const hero = post.data.heroImage
  ? post.data.heroImage
  : `/img/blog/${slug}.webp`
---

<ContentLayout
  title={post.data.title}
  description={post.data.description}
  tab="Blog"
>
  <Fragment slot="head">
    <meta property="og:image" content={ogImage} />
  </Fragment>

  <!-- <Header slot="header" /> -->
  <SidebarDiv slot="main">
    <article slot="main" class="flex flex-col gap-y-8">
      <header class="flex flex-col gap-y-4">
        {
          hero && (
            <div class="h-64 w-full overflow-hidden">
              <img
                src={hero}
                alt={post.data.heroAlt || post.data.title}
                class="w-full object-cover object-center"
                style="height: 100%;"
              />
            </div>
          )
        }

        <h1>
          {post.data.title}
        </h1>
        <VCenterRow
          className="text-foreground/50 justify-between gap-x-2 text-sm"
        >
          <VCenterRow className="gap-x-2">
            <Calendar className="stroke-foreground/40 w-5" strokeWidth={1.5} />
            <FormattedDate date={post.data.added} />

            <span class="bg-foreground/20 aspect-square h-2 w-2 rounded-full"
            ></span>
            <span>{remarkPluginFrontmatter.minutesRead}</span></VCenterRow
          >

          {
            post.data.updated &&
              post.data.updated.getTime() !== post.data.added.getTime() && (
                <span class="text-foreground/50">
                  Last updated <FormattedDate date={post.data.updated} />
                </span>
              )
          }
        </VCenterRow>

        {post.data.tags && <Tags tags={post.data.tags} />}
      </header>
      <section class="markdown">
        <Content />
      </section>
    </article>

    <BaseCol className="sticky top-20 gap-8" slot="side">
      <!-- <Toc headings={Astro.props.headings} /> -->
      <TableOfContents client:only="react" />
      <LatestPosts />
    </BaseCol>
  </SidebarDiv>
</ContentLayout>

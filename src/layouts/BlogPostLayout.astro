---
import { render } from 'astro:content'

import FormattedDate from '../components/FormattedDate.astro'

import { VCenterRow } from '@/components/layout/v-center-row'
import { TableOfContents } from '@/components/toc'
import { Calendar, Clock } from 'lucide-react'

import { BaseCol } from '@/components/layout/base-col'
import SidebarDiv from '@/components/layout/SidebarDiv.astro'
import SideTags from '@/components/SideTags.astro'
import type { PostWithHero } from '@/lib/astro/post'
import type { ICrumb } from '@/lib/crumbs'
import { getUrlFriendlyTag } from '@/lib/http/urls'
import { sectionToParts, type IPost } from '@/lib/post'
import { growingSubsets } from '@/lib/utils'
import ContentLayout from './ContentLayout.astro'
import { HeroImageCaption } from '@/components/posts/hero-image-caption'

// type Props = CollectionEntry<'blog'>['data'] & {
//   slug: string
//   minutesRead: string
//   //lastModified: Date
//   headings: {
//     depth: number
//     slug: string
//     text: string
//   }[]
// }

interface Props {
  post: PostWithHero
}

// const {
//   title,
//   description,
//   added,
//   updated,
//   hero,
//   slug,
//   minutesRead,
//   tags,
// } = Astro.props

const { post } = Astro.props

const slug = post.id.split('/').pop() || post.id // Flatten the slug

const { Content, remarkPluginFrontmatter } = await render(post)

const ogImage = `/img/og/${slug}.webp` //png

// const hero = post.data.hero
//   ? post.data.hero
//   : `/img/blog/${slug}.webp`

const crumbs: ICrumb[] = [
  {
    label: 'Blog',
    path: '/blog',
  },
]

// use the first to make a breadcrumb for nested
// sections that are otherwise not given in the slug
const section: string =
  post.data.sections && post.data.sections?.length > 0
    ? post.data.sections[0]!
    : ''

if (section) {
  const parts = growingSubsets(sectionToParts(section))

  for (const part of parts) {
    const name = part[part.length - 1]! // last part is the full section name
    crumbs.push({
      label: name,
      path: `/blog/${getUrlFriendlyTag(part.join('/'))}`,
    })
  }
}

const dataUpdated = post.data.updated ? post.data.updated : post.data.added
---

<ContentLayout
  title={post.data.title}
  description={post.data.description}
  crumbs={crumbs}
  tab="Blog"
>
  <Fragment slot="head">
    <meta property="og:image" content={ogImage} />
  </Fragment>

  <article slot="main" class="flex flex-col gap-y-8">
    <Fragment slot="main">
      <SidebarDiv>
        <header class="flex flex-col gap-y-4" slot="main">
          <h1 class="text-3xl font-bold">
            {post.data.title}
          </h1>

          {
            post.data.description && (
              <p class="text-foreground/70">{post.data.description}</p>
            )
          }
        </header>
      </SidebarDiv>
      <SidebarDiv mainCls="gap-y-8">
        <Fragment slot="main">
          {
            post.data.resolvedHero && (
              <div class="group relative aspect-16/9 w-full overflow-hidden rounded-2xl">
                <img
                  src={post.data.resolvedHero}
                  alt={post.data.heroAlt || post.data.title}
                  class="w-full scale-102 object-cover object-center transition-transform duration-500 ease-in-out group-hover:scale-105"
                  loading="lazy"
                />

                {post.data.heroAlt && (
                  <HeroImageCaption
                    post={post as IPost}
                    className="duration-500 opacity-0 transition-opacity group-hover:opacity-100"
                  />
                )}
              </div>
            )
          }

          <VCenterRow
            className="text-foreground/50 border-theme/75 justify-between gap-x-2 border-b-2 pb-4 text-sm"
          >
            <VCenterRow className="gap-x-4">
              <VCenterRow className="gap-x-1">
                <Calendar
                  className="stroke-foreground/40 w-5"
                  strokeWidth={1.5}
                />
                <FormattedDate date={post.data.added} />
              </VCenterRow>
              <span class="bg-foreground/20 aspect-square h-2 w-2 rounded-full"
              ></span>
              <VCenterRow className="gap-x-1">
                <Clock className="stroke-foreground/40 w-5" strokeWidth={1.5} />
                <span>{remarkPluginFrontmatter.minutesRead}</span></VCenterRow
              >
            </VCenterRow>

            {
              dataUpdated.getTime() !== post.data.added.getTime() && (
                <span class="text-foreground/50">
                  Last updated on <FormattedDate date={dataUpdated} />
                </span>
              )
            }
          </VCenterRow>

          <!-- {post.data.tags && <Tags tags={post.data.tags} />} -->

          <section class="markdown post">
            <Content />
          </section>
        </Fragment>
        <BaseCol className="sticky top-20 gap-12" slot="side">
          <SideTags tags={post.data.tags} />
          <TableOfContents client:only="react" />
          <!--  <LatestPosts /> -->
        </BaseCol>
      </SidebarDiv>
    </Fragment>
  </article>
</ContentLayout>

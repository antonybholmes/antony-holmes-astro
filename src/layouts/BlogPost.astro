---
import type { CollectionEntry } from 'astro:content'

import Footer from '../components/Footer.astro'
import BaseLayout from './BaseLayout.astro'
import FormattedDate from '../components/FormattedDate.astro'
import { Image } from 'astro:assets'
import LatestPosts from '@components/LatestPosts.astro'

import Tags from '@/components/Tags.astro'
import { Calendar, Dot } from 'lucide-react'
import { VCenterRow } from '@/components/layout/v-center-row'
import { TableOfContents } from '@/components/toc'

import ContentLayout from './ContentLayout.astro'
import SidebarDiv from '@/components/layout/SidebarDiv.astro'
import { BaseCol } from '@/components/layout/base-col'

type Props = CollectionEntry<'blog'>['data'] & {
  slug: string
  minutesRead: string
  lastModified: Date
  headings: {
    depth: number
    slug: string
    text: string
  }[]
}

const {
  title,
  description,
  added,
  //updatedDate,
  heroImage,
  slug,
  minutesRead,
  lastModified,
  tags,
} = Astro.props

const ogImage = `/img/og/${slug}.png`

const hero = heroImage ? heroImage : `/img/blog/${slug}.webp`
---

<ContentLayout title={title} description={description} tab="Blog">
  <Fragment slot="head">
    <meta property="og:image" content={ogImage} />
  </Fragment>

  <!-- <Header slot="header" /> -->
  <SidebarDiv slot="main">
    <article slot="main" class="flex flex-col gap-y-8">
      <header class="flex flex-col gap-y-4">
        {
          hero && (
            <div class="h-64 w-full overflow-hidden">
              <img
                src={hero}
                alt={title}
                class="w-full object-cover object-center"
                style="height: 100%;"
              />
            </div>
          )
        }

        <h1>
          {title}
        </h1>
        <VCenterRow
          className="text-foreground/50 justify-between gap-x-2 text-sm"
        >
          <VCenterRow className="gap-x-2">
            <Calendar className="stroke-foreground/40 w-5" strokeWidth={1.5} />
            <FormattedDate date={added} />

            <span class="bg-foreground/20 aspect-square h-2 w-2 rounded-full"
            ></span>
            <span>{minutesRead}</span></VCenterRow
          >

          {
            lastModified && lastModified !== added && (
              <span class="text-foreground/50">
                Last updated <FormattedDate date={lastModified} />
              </span>
            )
          }
        </VCenterRow>

        <Tags tags={tags} />
      </header>
      <section class="markdown">
        <slot name="content" />
      </section>
    </article>

    <BaseCol className="sticky top-20 gap-8" slot="side">
      <!-- <Toc headings={Astro.props.headings} /> -->
      <TableOfContents client:only="react" />
      <LatestPosts />
    </BaseCol>
  </SidebarDiv>
</ContentLayout>

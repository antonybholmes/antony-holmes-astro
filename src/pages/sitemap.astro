---
import { ThemeLink } from '@/components/link/theme-link'
import { capitalCase } from '@/lib/text/capital-case'
import { getCollection } from 'astro:content'
import fs from 'fs'
import path from 'path'
import ContentLayout from '../layouts/ContentLayout.astro'

// 1. Static routes (manually added)
const staticRoutes = [
  { url: '/', title: 'Home' },
  { url: '/about', title: 'About' },
]

// 2. Dynamic routes from content collection (e.g. blog)
const blogPosts = await getCollection('blog')
const blogRoutes = blogPosts.map(post => ({
  url: `/blog/${post.id}`,
  title: post.data.title || post.id,
}))

// 3. Read pages directory to auto-discover routes
const pageDir = path.resolve('./src/pages')
const rawFiles = fs.readdirSync(pageDir, { withFileTypes: true })

function getPageRoutes(
  dir: string,
  base: string = ''
): { url: string; title: string }[] {
  const files = fs.readdirSync(dir, { withFileTypes: true })
  return files.flatMap(file => {
    const fullPath = path.join(dir, file.name)
    const routePath = path
      .join(base, file.name)
      .replace(/index\.astro$/, '')
      .replace(/\.astro$/, '')
      .replace(/\.mdx?$/, '')
      .replace(/\\/g, '/') // Windows fix

    if (file.isDirectory()) {
      return getPageRoutes(fullPath, routePath)
    } else if (
      (file.name.endsWith('.astro') ||
        file.name.endsWith('.mdx') ||
        file.name.endsWith('.md')) &&
      !file.name.includes('slug') &&
      !file.name.includes('404') &&
      !file.name.includes('sitemap') &&
      !file.name.includes('index')
    ) {
      return [
        {
          url: routePath === '' ? '/' : routePath,
          title: capitalCase(file.name.replace(/\..+/, '')),
        },
      ]
    }
    return []
  })
}

const discoveredRoutes = getPageRoutes('./src/pages')

// Merge all
const allRoutes = [...discoveredRoutes]

// Remove duplicates (by URL)
const uniqueRoutes = Array.from(
  new Map(allRoutes.map(r => [r.url, r])).values()
).sort((a, b) => a.title.localeCompare(b.title))
---

<ContentLayout title="Site Map" showTitle={true}>
  <div class="mt-8 mb-64 grid grid-cols-1 gap-8 md:grid-cols-4" slot="main">
    <section>
      <h3 class="mt-4 font-semibold">Learn More</h3>
      <ul class="mt-4 grid grid-cols-1 gap-y-4">
        {
          uniqueRoutes.map((link: { url: string; title: string }) => {
            return (
              <li>
                <ThemeLink aria-label={`Goto ${link.title}`} href={link.url}>
                  {link.title}
                </ThemeLink>
              </li>
            )
          })
        }
      </ul>
    </section>

    <section>
      <h3 class="mt-4 font-semibold">Help</h3>
      <ul class="mt-4 flex flex-col gap-y-4">
        <li>
          <ThemeLink href="/about" aria-label="View help information">
            About
          </ThemeLink>
        </li>

        <li>
          <ThemeLink href="/privacy" aria-label="View privacy information">
            Privacy Policy
          </ThemeLink>
        </li>
        <li>
          <ThemeLink href="/terms" aria-label="View terms and conditions">
            Terms of Use
          </ThemeLink>
        </li>

        <li>
          <ThemeLink href="/contact" aria-label="Contact us">Contact</ThemeLink>
        </li>
      </ul>
    </section>
  </div>
</ContentLayout>

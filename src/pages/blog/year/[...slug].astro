---
import BlogPostsLayout from '@/layouts/BlogPostsLayout.astro'
import { getSortedPosts } from '@/lib/astro/post'
import { paginate } from '@/lib/paginate'
import type { CollectionEntry } from 'astro:content'

// 1. Generate all unique tags for static paths
export async function getStaticPaths() {
  const posts = await getSortedPosts()

  // params need to be strings so we convert the year to a string
  // and use a Set to ensure uniqueness
  const yearSet = new Set<number>()
  for (const post of posts) {
    yearSet.add(post.data.added.getFullYear())

    if (post.data.updated) {
      // if the post has an updated date, add that year as well
      // to ensure we include posts that were updated in a different year
      // than they were added
      yearSet.add(post.data.updated.getFullYear())
    }
  }

  let paths: {
    params: { slug?: string }
    props: {
      title: string
      pageTitle: string
      showTitle: boolean
      root: string
      page: number
      pages: number
      data: CollectionEntry<'blog'>[]
    }
  }[] = []

  for (const year of yearSet) {
    const slug = year.toString()
    const filteredPosts = posts
      .filter(
        post =>
          post.data.added.getFullYear() === year ||
          post.data.updated?.getFullYear() === year
      )
      .sort((a, b) => {
        return b.data.added.getTime() - a.data.added.getTime()
      })

    paths = paths.concat(
      paginate(filteredPosts, slug).map(p => ({
        ...p,
        props: {
          ...p.props,
          title: `Posts from ${year}`,
          pageTitle: `Posts from ${year} - Page ${p.props.page + 1} of ${p.props.pages}`,
          showTitle: true,
          root: `/blog/year/${slug}`,
        },
      }))
    )
  }

  return paths
}

const { title, pageTitle, page, root, pages, data } = Astro.props
---

<BlogPostsLayout
  title={title}
  pageTitle={pageTitle}
  page={page}
  pages={pages}
  posts={data}
  root={root}
  showTitle={true}
/>

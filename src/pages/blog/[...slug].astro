---
import { type CollectionEntry } from 'astro:content'
import BlogPostLayout from '../../layouts/BlogPostLayout.astro'

import BlogPostsLayout from '@/layouts/BlogPostsLayout.astro'
import { getPostSectionMap, getSortedPosts } from '@/lib/astro/post'
import {
  paginate,
  type IPaginationProps,
  type PaginationType,
} from '@/lib/paginate'
import { getUrlFriendlyTag } from '@/lib/http/urls'

// interface Props extends IPaginationProps<CollectionEntry<'blog'>> {
//   title: string
//   root: string
// }

export async function getStaticPaths() {
  let posts = await getSortedPosts()

  const featuredPosts = posts.filter(post => post.data.featured)
  const otherPosts = posts.filter(post => !post.data.featured)

  let paths: {
    params: { slug?: string }
    props: {
      type: PaginationType
      title: string
      root: string
      page: number
      pages: number
      data: CollectionEntry<'blog'>[]
      featuredPosts?: CollectionEntry<'blog'>[]
    }
  }[] = []

  for (const post of otherPosts) {
    if (post.data.draft) continue // Skip draft posts

    // If the post has sections, create a path for each section
    // flatten slug to the last part of the path
    // e.g. /test/my-post/ becomes /my-post/
    // this is useful for SEO and readability

    paths.push({
      params: { slug: post.id },
      props: {
        type: 'post',
        title: post.data.title,
        root: '',
        page: 0,
        pages: 1,
        data: [post],
      },
    })
  }

  // const pages = paginate(otherPosts, '').map(p => ({
  //   ...p,
  //   props: {
  //     ...p.props,
  //     type: 'posts' as PaginationType,
  //     title: 'Blog',
  //     root: `/blog`,
  //   },
  // }))

  // paths = paths.concat(pages)

  const sectionMap = getPostSectionMap(posts)

  for (const [section, posts] of sectionMap.entries()) {
    const featuredPosts = posts.filter(post => post.data.featured)
    const otherPosts = posts.filter(post => !post.data.featured)

    // create a path for each section
    // e.g. /blog/engineering/page/2/
    // paths.push({
    //   params: { slug: section },
    //   props: {
    //     type: 'posts',
    //     title: section,
    //     root: `/blog/${section}/`,
    //     page: 1,
    //     pages: Math.ceil(posts.length / 10), // assuming 10 posts per page
    //     data: posts.slice(0, 10), // first page of posts
    //   },
    // })
    const sectionParts = section.split('/').map(part => part.trim())
    const title = sectionParts[sectionParts.length - 1]
    const slug = getUrlFriendlyTag(section)
    const root = `/blog/${slug}`

    const pages = paginate(otherPosts, slug).map(p => ({
      ...p,
      props: {
        ...p.props,
        type: 'posts' as PaginationType,
        title,
        root,
        featuredPosts: p.props.page === 0 ? featuredPosts : [],
      },
    }))

    paths = paths.concat(pages)
  }

  return paths
}

// interface Props {
//   post: CollectionEntry<'blog'>
// }

//const { post } = Astro.props
//const { slug } = Astro.params

const { type, title, root, page, pages, data, featuredPosts } = Astro.props
---

{type === 'post' && <BlogPostLayout post={data[0]} />}

{
  type === 'posts' && (
    <BlogPostsLayout
      title={title}
      page={page}
      pages={pages}
      posts={data}
      featuredPosts={featuredPosts}
      root={root}
      showSectionLinks={root === '/blog'}
      showTitle={root !== '/blog'}
    />
  )
}

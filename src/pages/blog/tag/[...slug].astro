---
import { getTagPostMap } from '@/lib/astro/tags'
import { getUrlFriendlyTag } from '@/lib/http/urls'
import type { IPost } from '@/lib/post'
import { PostsPage } from '@components/posts/posts-page'
import ContentLayout from '@layouts/ContentLayout.astro'
import { getSortedPosts } from '@lib/astro/post'
import { paginate, type IPaginationProps } from '@lib/paginate'

import { getTagBaseUrl } from '@lib/urls'
import type { CollectionEntry } from 'astro:content'

interface Props extends IPaginationProps<CollectionEntry<'blog'>> {
  title: string
  showTitle?: boolean
  root: string
}

export async function getStaticPaths() {
  const allPosts = await getSortedPosts()

  const tagMap = getTagPostMap(allPosts)

  let paths: {
    params: { slug?: string }
    props: Props
  }[] = []

  for (const [tag, posts] of tagMap.entries()) {
    paths = paths.concat(
      paginate(posts, getUrlFriendlyTag(tag)).map(p => ({
        ...p,
        props: {
          ...p.props,

          title: `${tag}  - Page ${p.props.page + 1} of ${p.props.pages}`,
          showTitle: true,

          root: getTagBaseUrl(tag),
        },
      }))
    )
  }

  return paths
}

const { title, showTitle, page, root, pages, data } = Astro.props
---

<ContentLayout title={title} showTitle={showTitle} tab="Blog">
  <PostsPage
    posts={data as IPost[]}
    page={page}
    pages={pages}
    root={root}
    slot="main"
  />
</ContentLayout>

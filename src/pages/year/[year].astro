---
import FormattedDate from '@components/FormattedDate.astro'
import BaseLayout from '@layouts/BaseLayout.astro'
import { getCollection } from 'astro:content'

// 1. Generate all unique tags for static paths
export async function getStaticPaths() {
  const posts = await getCollection('blog')

  // params need to be strings so we convert the year to a string
  // and use a Set to ensure uniqueness
  const yearSet = new Set<string>()
  for (const post of posts) {
    yearSet.add(post.data.added.getFullYear().toString())
  }

  return [...yearSet].map(year => ({
    params: { year },
  }))
}

// 2. Get the current tag param from the URL
const year = Astro.params.year as string
const posts = await getCollection('blog')

// 3. Filter posts that include the current tag (case-insensitive)
const filteredPosts = posts
  .filter(post => post.data.added.getFullYear().toString() === year)
  .sort((a, b) => {
    return b.data.added.getTime() - a.data.added.getTime()
  }) // Sort by most recent first
---

<BaseLayout
  title={`Posts written in ${year}`}
  description={`A collection of posts written in ${year}.`}
>
  <main slot="main">
    <h1>Posts written in {year}</h1>

    {
      filteredPosts.length === 0 ? (
        <p>No posts found for this year.</p>
      ) : (
        <ul>
          {filteredPosts.map(post => (
            <li>
              <a href={`/blog/${post.id}`}>{post.data.title}</a>
              <br />
              <small>
                <FormattedDate date={post.data.added} />
              </small>
            </li>
          ))}
        </ul>
      )
    }
  </main>
</BaseLayout>
